FROM docker.io/arm64v8/ubuntu:18.04
#FROM localhost:5000/ubuntu:18.04

ARG DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -qq -y --no-install-recommends autoconf \
                                                                     automake \
                                                                     bc \
                                                                     bzip2 \
                                                                     ca-certificates \
                                                                     can-utils \
                                                                     freeglut3-dev \
                                                                     git-core \
                                                                     gstreamer1.0-alsa \
                                                                     gstreamer1.0-libav \
                                                                     gstreamer1.0-plugins-bad \
                                                                     gstreamer1.0-plugins-base \
                                                                     gstreamer1.0-plugins-good \
                                                                     gstreamer1.0-plugins-ugly \
                                                                     gstreamer1.0-tools \
                                                                     i2c-tools \
                                                                     iw \
                                                                     kbd \
                                                                     language-pack-en-base \
                                                                     libapt-inst2.0 \
                                                                     libcanberra-gtk3-module \
                                                                     libgles2 \
                                                                     libglu1-mesa-dev \
                                                                     libglvnd-dev \
                                                                     libgtk-3-0 \
                                                                     libpython2.7 \
                                                                     libtool \
                                                                     libudev1 \
                                                                     libvulkan1 \
                                                                     libzmq5 \
                                                                     mtd-utils \
                                                                     parted \
                                                                     pciutils \
                                                                     pkg-config \
                                                                     libxext-dev \
                                                                     libx11-dev \
                                                                     python \
                                                                     python-pexpect \
                                                                     python3-distutils \
                                                                     sox \
                                                                     udev \
                                                                     vulkan-utils \
                                                                     wget \
                                                                     wireless-tools \
                                                                     wpasupplicant \
                                                                     x11proto-gl-dev && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean

ARG BUILD_VERSION

# Setup environment variables.
ENV container docker
ENV NVIDIA_DRIVER_CAPABILITIES ${NVIDIA_DRIVER_CAPABILITIES},display

# Set the locale.
ENV LC_ALL=C.UTF-8 \
    LANG=C.UTF-8 \
    LANGUAGE=C.UTF-8

# Install packages.
RUN apt-get update && \
    apt-get install -q --yes dirmngr \
                             gnupg2 \
                             lsb-release && \
    rm -rf /var/lib/apt/lists/*

# Setup sources.list.
RUN echo "deb-src http://us.archive.ubuntu.com/ubuntu/ $(lsb_release -cs) main restricted \n\
deb-src http://us.archive.ubuntu.com/ubuntu/ $(lsb_release -cs)-updates main restricted \n\
deb-src http://us.archive.ubuntu.com/ubuntu/ $(lsb_release -cs)-backports main restricted universe multiverse \n\
deb-src http://security.ubuntu.com/ubuntu $(lsb_release -cs)-security main restricted" \
    > /etc/apt/sources.list.d/official-source-repositories.list

# Install build tools.
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive \
    TERM=linux \
    apt-get install --no-install-recommends -q --yes apt-transport-https \
                                                     apt-utils \
                                                     bash-completion \
                                                     build-essential \
                                                     ca-certificates \
                                                     clang \
                                                     clang-format \
                                                     cmake \
                                                     cmake-curses-gui \
                                                     curl \
                                                     gconf2 \
                                                     gconf-service \
                                                     gdb \
                                                     git-core \
                                                     git-gui \
                                                     gvfs-bin \
                                                     inetutils-ping \
                                                     less \
                                                     llvm \
                                                     llvm-dev \
                                                     nano \
                                                     net-tools \
                                                     pkg-config \
                                                     shared-mime-info \
                                                     software-properties-common \
                                                     sudo \
                                                     tzdata \
                                                     unzip \
                                                     wget && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/*

RUN echo "/usr/lib/aarch64-linux-gnu/tegra" >> /etc/ld.so.conf.d/nvidia-tegra.conf && \
    echo "/usr/lib/aarch64-linux-gnu/tegra-egl" >> /etc/ld.so.conf.d/nvidia-tegra.conf

RUN rm /usr/share/glvnd/egl_vendor.d/50_mesa.json
RUN mkdir -p /usr/share/glvnd/egl_vendor.d/ && echo '\
{\
    "file_format_version" : "1.0.0",\
    "ICD" : {\
        "library_path" : "libEGL_nvidia.so.0"\
    }\
}' > /usr/share/glvnd/egl_vendor.d/10_nvidia.json

RUN mkdir -p /usr/share/egl/egl_external_platform.d/ && echo '\
{\
    "file_format_version" : "1.0.0",\
    "ICD" : {\
        "library_path" : "libnvidia-egl-wayland.so.1"\
    }\
}' > /usr/share/egl/egl_external_platform.d/nvidia_wayland.json

RUN echo "/usr/local/cuda-10.0/targets/aarch64-linux/lib" >> /etc/ld.so.conf.d/nvidia.conf

ARG CUDA=invalid

COPY ./dst/bin /usr/local/cuda-$CUDA/bin
COPY ./dst/nvvm /usr/local/cuda-$CUDA/nvvm
COPY ./dst/nvvmx /usr/local/cuda-$CUDA/nvvmx
COPY ./dst/include /usr/local/cuda-$CUDA/targets/aarch64-linux/include
COPY ./dst/lib64/stubs /usr/local/cuda-$CUDA/targets/aarch64-linux/lib/stubs
COPY ./dst/lib64/libcudadevrt.a /usr/local/cuda-$CUDA/targets/aarch64-linux/lib/
COPY ./dst/lib64/libcudart_static.a /usr/local/cuda-$CUDA/targets/aarch64-linux/lib/

RUN ln -s /usr/local/cuda-$CUDA /usr/local/cuda && \
    ln -s /usr/local/cuda-$CUDA/targets/aarch64-linux/include /usr/local/cuda/include && \
    ln -s /usr/local/cuda-$CUDA/targets/aarch64-linux/lib /usr/local/cuda/lib64

ENV PATH /usr/local/cuda-$CUDA/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/cuda-$CUDA/targets/aarch64-linux/lib:${LD_LIBRARY_PATH}

# Symlink to nvidia.json --> /usr/share/glvnd/egl_vendor.d/10_nvidia.json has already been added to the target rootfs by the nv_tegra/nvidia_drivers installation.

RUN echo "/usr/local/lib/aarch64-linux-gnu" >> /etc/ld.so.conf.d/glvnd.conf && \
    ldconfig

#RUN ldconfig

ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES all

# Labels.
LABEL org.label-schema.schema-version="1.0"
LABEL org.label-schema.name="jetson-agx/opengl:jetpack-$BUILD_VERSION-xenial"
LABEL org.label-schema.description="NVIDIA Jetson AGX JetPack-$BUILD_VERSION OpenGL - Ubuntu-16.04."
LABEL org.label-schema.version=$BUILD_VERSION
LABEL org.label-schema.docker.cmd="xhost +local:root \
docker run -it \
  --device /dev/nvhost-as-gpu \
  --device /dev/nvhost-ctrl \
  --device /dev/nvhost-ctrl-gpu \
  --device /dev/nvhost-ctxsw-gpu \
  --device /dev/nvhost-dbg-gpu \
  --device /dev/nvhost-gpu \
  --device /dev/nvhost-prof-gpu \
  --device /dev/nvhost-sched-gpu \
  --device /dev/nvhost-tsg-gpu \
  --device /dev/nvmap \
  --device /dev/snd \
  --net=host \
  -e DISPLAY \
  -e PULSE_SERVER=tcp:$HOST_IP:4713 \
  -e PULSE_COOKIE_DATA=`pax11publish -d | grep --color=never -Po '(?<=^Cookie: ).*'` \
  -e QT_GRAPHICSSYSTEM=native \
  -e QT_X11_NO_MITSHM=1 \
  -v /dev/shm:/dev/shm \
  -v /etc/localtime:/etc/localtime:ro \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  -v /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket:ro \
  -v ${XDG_RUNTIME_DIR}/pulse/native:/run/user/1000/pulse/native \
  -v ~/mount/backup:/backup \
  -v ~/mount/data:/data \
  -v ~/mount/project:/project \
  -v ~/mount/tool:/tool \
  --rm \
  --name jetson-agx-opengl-jetpack-$BUILD_VERSION-xenial \
  jetson-agx/opengl:jetpack-$BUILD_VERSION-xenial \
xhost -local:root"

# Update .bashrc.
RUN echo \
'export LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/lib/aarch64-linux-gnu/tegra:/usr/lib/aarch64-linux-gnu/tegra-egl:/usr/lib/aarch64-linux-gnu:/usr/local/lib/aarch64-linux-gnu:/usr/local/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n\
export NO_AT_BRIDGE=1\n\
export PATH=/usr/local/cuda/bin:$PATH\n' \
    >> $HOME/.bashrc

CMD ["/bin/bash"]

