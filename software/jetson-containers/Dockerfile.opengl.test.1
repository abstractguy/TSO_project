# jetson-agx/opengl:jetpack-$BUILD_VERSION-xenial

# Build libglvnd.
#ARG REPOSITORY=docker://registry.me:5000/ubuntu
#ARG REPOSITORY=docker://arm64v8/ubuntu
ARG REPOSITORY=arm64v8/ubuntu
#ARG TAG=18.04
ARG TAG=xenial

# Build libglvnd.
FROM ${REPOSITORY}:${TAG} as glvnd

RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive \
    TERM=linux \
    apt-get install --no-install-recommends -q --yes ca-certificates \
                                                     gnupg2 && \
    rm -rf /var/lib/apt/lists/*

COPY jetson-ota-public.key /etc/jetson-ota-public.key
RUN apt-key add /etc/jetson-ota-public.key

RUN echo "deb https://repo.download.nvidia.com/jetson/common $RELEASE main" >> /etc/apt/sources.list

ARG DOC=/usr/share/doc/cuda
ARG VAR=/var/cuda
ARG RELEASE=r32.4
#ARG TAG=r32.4.3
ARG CUDA=10.2
ARG L4T_CUDA_REGISTRY="nvcr.io/nvidian/nvidia-l4t-cuda"
ARG L4T_BASE_REGISTRY="nvcr.io/nvidian/nvidia-l4t-base"
#ARG L4T_CUDA_REGISTRY="localhost:5000/nvidia-l4t-cuda"
#ARG L4T_BASE_REGISTRY="localhost:5000/nvidia-l4t-base"

RUN CUDAPKG=$(echo $CUDA | sed 's/\./-/'); \
    apt-get update && \
    apt-get install --yes --no-install-recommends cuda-libraries-$CUDAPKG \
                                                  cuda-nvtx-$CUDAPKG \
                                                  cuda-libraries-dev-$CUDAPKG \
                                                  cuda-minimal-build-$CUDAPKG \
                                                  cuda-license-$CUDAPKG \
                                                  cuda-command-line-tools-$CUDAPKG && \
    ln -s /usr/local/cuda-$CUDA /usr/local/cuda && \
    rm -rf /var/lib/apt/lists/*

ENV LIBRARY_PATH /usr/local/cuda/lib64/stubs

RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive \
    TERM=linux \
    apt-get install --no-install-recommends -q --yes autoconf \
                                                     automake \
                                                     git-core \
                                                     libtool \
                                                     pkg-config \
                                                     python \
                                                     libxext-dev \
                                                     libx11-dev \
                                                     x11proto-gl-dev && \
    rm -rf /var/lib/apt/lists/*

ARG LIBGLVND_VERSION='v1.1.0'

WORKDIR /opt/libglvnd
RUN git clone --branch="${LIBGLVND_VERSION}" https://github.com/NVIDIA/libglvnd.git . && \
    ./autogen.sh  && \
    ./configure --prefix=/usr/local --libdir=/usr/local/lib/aarch64-linux-gnu && \
    make -j"$(nproc)" install-strip && \
    find /usr/local/lib/aarch64-linux-gnu -type f -name 'lib*.la' -delete

# Build OpenGL base image.
#ARG REPOSITORY=docker://registry.me:5000/ubuntu
#ARG REPOSITORY=docker://arm64v8/ubuntu
ARG REPOSITORY=arm64v8/ubuntu
#ARG TAG=18.04
ARG TAG=xenial

FROM ${REPOSITORY}:${TAG}

ARG BUILD_VERSION='4.4.1'

# Setup environment variables.
ENV container docker
ENV NVIDIA_DRIVER_CAPABILITIES ${NVIDIA_DRIVER_CAPABILITIES},display

# Set the locale.
ENV LC_ALL=C.UTF-8 \
    LANG=C.UTF-8 \
    LANGUAGE=C.UTF-8

# Install packages.
RUN apt-get update && \
    apt-get install -q --yes dirmngr \
                             gnupg2 \
                             lsb-release && \
    rm -rf /var/lib/apt/lists/*

# Setup sources.list.
RUN echo "deb-src http://us.archive.ubuntu.com/ubuntu/ $(lsb_release -cs) main restricted \n\
deb-src http://us.archive.ubuntu.com/ubuntu/ $(lsb_release -cs)-updates main restricted \n\
deb-src http://us.archive.ubuntu.com/ubuntu/ $(lsb_release -cs)-backports main restricted universe multiverse \n\
deb-src http://security.ubuntu.com/ubuntu $(lsb_release -cs)-security main restricted" \
    > /etc/apt/sources.list.d/official-source-repositories.list

# Install build tools.
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive \
    TERM=linux \
    apt-get install --no-install-recommends -q --yes apt-transport-https \
                                                     apt-utils \
                                                     bash-completion \
                                                     build-essential \
                                                     ca-certificates \
                                                     clang \
                                                     clang-format \
                                                     cmake \
                                                     cmake-curses-gui \
                                                     curl \
                                                     gconf2 \
                                                     gconf-service \
                                                     gdb \
                                                     git-core \
                                                     git-gui \
                                                     gvfs-bin \
                                                     inetutils-ping \
                                                     less \
                                                     llvm \
                                                     llvm-dev \
                                                     nano \
                                                     net-tools \
                                                     pkg-config \
                                                     shared-mime-info \
                                                     software-properties-common \
                                                     sudo \
                                                     tzdata \
                                                     unzip \
                                                     wget && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/*

# Download and install Nvidia Jetson Xavier driver package.
RUN if [ "$BUILD_VERSION" = "3.3"   ]; then \
      echo "downloading jetpack-$BUILD_VERSION" ; \
      wget -qO- https://developer.download.nvidia.com/devzone/devcenter/mobile/jetpack_l4t/3.3/lw.xd42/JetPackL4T_33_b39/Tegra186_Linux_R28.2.1_aarch64.tbz2 | \
      tar -xvj -C /tmp/ ; \
      cd /tmp/Linux_for_Tegra ; \
    elif [ "$BUILD_VERSION" = "4.4.1" ]; then \
      echo "downloading jetpack-$BUILD_VERSION" ; \
	  wget -qO- https://developer.download.nvidia.com/devzone/devcenter/mobile/jetpack_l4t/4.1.1/xddsn.im/JetPackL4T_4.1.1_b57/Jetson_Linux_R31.1.0_aarch64.tbz2 | \
      tar -xvj -C /tmp/ ; \
      cd /tmp/Linux_for_Tegra ; \
      # fix error in tar command when extracting configuration files, by overwriting existing configuration files \
      sed -i -e 's@tar xpfm ${LDK_NV_TEGRA_DIR}/config.tbz2@tar --overwrite -xpmf ${LDK_NV_TEGRA_DIR}/config.tbz2@g' apply_binaries.sh ; \
    else \
      echo "error: please specify jetpack version in build.sh" \
      exit 1 ;\
    fi \
    && ./apply_binaries.sh -r / \
    # fix erroneous entry in /etc/ld.so.conf.d/nvidia-tegra.conf \
    && echo "/usr/lib/aarch64-linux-gnu/tegra" > /etc/ld.so.conf.d/nvidia-tegra.conf \
    # add missing /usr/lib/aarch64-linux-gnu/tegra/ld.so.conf \
    && echo "/usr/lib/aarch64-linux-gnu/tegra" > /usr/lib/aarch64-linux-gnu/tegra/ld.so.conf \
    && update-alternatives --install /etc/ld.so.conf.d/aarch64-linux-gnu_GL.conf aarch64-linux-gnu_gl_conf /usr/lib/aarch64-linux-gnu/tegra/ld.so.conf 1000 \
    # fix erroneous entry in /usr/lib/aarch64-linux-gnu/tegra-egl/ld.so.conf \
    && echo "/usr/lib/aarch64-linux-gnu/tegra-egl" > /usr/lib/aarch64-linux-gnu/tegra-egl/ld.so.conf \
    && update-alternatives --install /etc/ld.so.conf.d/aarch64-linux-gnu_EGL.conf aarch64-linux-gnu_egl_conf /usr/lib/aarch64-linux-gnu/tegra-egl/ld.so.conf 1000 \
    && rm -Rf /tmp/Linux_for_Tegra

# Copy libglvnd from the previous build stage.
COPY --from=glvnd /usr/local/lib/aarch64-linux-gnu /usr/local/lib/aarch64-linux-gnu

# Symlink to nvidia.json --> /usr/share/glvnd/egl_vendor.d/10_nvidia.json has already been added to the target rootfs by the nv_tegra/nvidia_drivers installation.

RUN echo "/usr/local/lib/aarch64-linux-gnu" >> /etc/ld.so.conf.d/glvnd.conf && \
    ldconfig

# Labels.
LABEL org.label-schema.schema-version="1.0"
LABEL org.label-schema.name="jetson-agx/opengl:jetpack-$BUILD_VERSION-xenial"
LABEL org.label-schema.description="NVIDIA Jetson AGX JetPack-$BUILD_VERSION OpenGL - Ubuntu-16.04."
LABEL org.label-schema.version=$BUILD_VERSION
LABEL org.label-schema.docker.cmd="xhost +local:root \
docker run -it \
  --device /dev/nvhost-as-gpu \
  --device /dev/nvhost-ctrl \
  --device /dev/nvhost-ctrl-gpu \
  --device /dev/nvhost-ctxsw-gpu \
  --device /dev/nvhost-dbg-gpu \
  --device /dev/nvhost-gpu \
  --device /dev/nvhost-prof-gpu \
  --device /dev/nvhost-sched-gpu \
  --device /dev/nvhost-tsg-gpu \
  --device /dev/nvmap \
  --device /dev/snd \
  --net=host \
  -e DISPLAY \
  -e PULSE_SERVER=tcp:$HOST_IP:4713 \
  -e PULSE_COOKIE_DATA=`pax11publish -d | grep --color=never -Po '(?<=^Cookie: ).*'` \
  -e QT_GRAPHICSSYSTEM=native \
  -e QT_X11_NO_MITSHM=1 \
  -v /dev/shm:/dev/shm \
  -v /etc/localtime:/etc/localtime:ro \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  -v /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket:ro \
  -v ${XDG_RUNTIME_DIR}/pulse/native:/run/user/1000/pulse/native \
  -v ~/mount/backup:/backup \
  -v ~/mount/data:/data \
  -v ~/mount/project:/project \
  -v ~/mount/tool:/tool \
  --rm \
  --name jetson-agx-opengl-jetpack-$BUILD_VERSION-xenial \
  jetson-agx/opengl:jetpack-$BUILD_VERSION-xenial \
xhost -local:root"

# Update .bashrc.
RUN echo \
'export LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/lib/aarch64-linux-gnu/tegra:/usr/lib/aarch64-linux-gnu/tegra-egl:/usr/lib/aarch64-linux-gnu:/usr/local/lib/aarch64-linux-gnu:/usr/local/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n\
export NO_AT_BRIDGE=1\n\
export PATH=/usr/local/cuda/bin:$PATH\n' \
    >> $HOME/.bashrc

CMD ["bash"]

