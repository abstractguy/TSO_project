import json
import sys
from time import sleep
from Logic.Environment import Environment
from Logic.Interpreter import Interpreter

"""
This is an example script for running a *.task file without the GUI open.

For example, if you use uArmCreatorStudio to make a cool program, but then want to run it on a Raspberry Pi, or
run it from Command Line without any GUI open, then you can do that.

The way this works is you must have PySerial, OpenCV, Numpy, installed, but NOT PyQt5- since no GUI is used. Simply
have this example script in the same directory as MainGUI.py, and fill out the path variables shown below-

taskPath: Must lead to the .task file you wish to run
settingspath: Must lead to the Settings.txt file that is generated by uArmCreatorStudio.exe
cascadePath: Must lead to the resources folder that has the XXXXX_cascade.xml files. This only matters if you have
             face tracking, smile tracking, or eye tracking anywhere in your program. If not, no crashes will occur.
objectsPath: This should lead to Resources\\Objects, a directory generated by uArmCreatorStudio.exe, which is the
             directory where Vision objects, Functions, MotionPaths are all saved by the GUI.

When you run this script, everything will start up automatically. Make sure that you have run this script with the
GUI in the same directory, so it will generate the correct settings file and objects that you might need, so when you
run this it will already know the robots COM port and the cameras ID, and all the calibration information.
"""

taskPath     = "Resources\\Save Files\\test.task"
settingsPath = "Resources\\Settings.txt"
cascadePath  = "Resources\\"
objectsPath  = "Resources\\Objects"


print("Place this .py file in the same directory as uArmCreatorStudio.exe.")
print("Make sure the script works in GUI before trying it here")


# Create the environment. This will connect the robot and camera using Settings.txt
env = Environment(settingsPath=settingsPath, objectsPath=objectsPath, cascadePath=cascadePath)


# Wait for the robot and camera to connect in their seperate threads
print("Waiting 8 seconds for robot and camera to connect")
sleep(8)


# Create the interpreter
interpreter = Interpreter(env)


# Load the .task file you want to run
saveFile = json.load(open(taskPath))


# Load the task into the interpreter, and print the errors
errors = interpreter.initializeScript(saveFile)
print("The following errors occured while initializing the script:\n", errors)
if str(input("Do you want to continue and start the script? (Y/N)")).lower() == "n": sys.exit()

# Before starting script, move the robot to a home position
robot = env.getRobot()
robot.setPos(**robot.home)


# Start the task in another thread
interpreter.startThread(threaded=False)

env.close()
print("Errors during interpreter run: ", interpreter.getExitErrors())
